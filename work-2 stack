"""
stack
"""
from __future__ import annotations

class Stack:
    def __init__(self, size: int):
        self._top = 0
        self._content = [ None for _ in range(size) ]
        
    def push(self, i: int) -> None:
        self._content[self._top] = i
        self._top += 1
        
    def pop(self) -> int:
        self._top -= 1
        return self._content[self._top]
        
    def empty(self):
        self._content == 0
        
    def isEmpty(self): 
        return len(self._content)==0  

    def peep(self): 
        if not self.isEmpty(): 
            return self._content[len(self._content)-1] 
            
    @property
    def top(self) -> int:
        return self._top
        
x = False

def dump(stack):
    print(f"堆疊 (stack)： [", end="")
    
    for i in range(stack.top):
        print(f" {stack._content[i]}", end="")
        
    print(f" ] top = {stack.top}");
    
if __name__ == "__main__":
    stack = Stack(10)
    
    print(f"讓我們 *推* (push) 一些資料進堆疊 (stack):");
    
    for i in range(5):
        print(f"  推入 (data pushed): {i}; ", end="");
        
        stack.push(i)
        
        dump(stack)
        
    print()
    dump(stack)
    print()
    
    print(f"  堆疊是否為空的 => {stack.isEmpty()}")
    
    print(f"資料推完了，現在把資料 *彈* (pop) 出來：")
    
    for i in range(5):
        print(
            f"  彈出 (data popped): {stack.pop()}; ",
            end=""
        )
        
        x = True
        
        dump(stack)
        
    if(x == True):
        print(f"  堆疊內容 = {stack.empty()}")
        
print(f"  堆疊頂端 = {stack.peep()}")
